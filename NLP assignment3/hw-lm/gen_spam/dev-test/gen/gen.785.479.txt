SUBJECT: [ &WEBSITE Hi , we wordered if you could comment on our thoughts so far about the subcategorisation / alternation of verbs . Cheers . &NAME , &NAME , &NAME , &NAME . 2E. . Dative alternation . 2E. . b)' &NAME made &NAME a cake . ' VP [ vform &NUM io ] - ) &NAME [ vform &NUM none , &NAME &NUM ditrans ] NP This verb phrase dative alternation is of an indirect object form without a preposition pharse . vform of the &NAME node is set to none so no recursion occurs . VP [ vform &NUM none , &NAME &NUM ditrans ] - ) &CHAR NP The &NAME rule for the ditrans valence with vform &NUM none needs to be specified as above for the first rule to work . &CHAR ) ' &NAME made a cake for &NAME . ' VP [ vform &NUM ioprep ] - ) &NAME [ vform &NUM none , &NAME &NUM ditrans ] PP This verb phrase dative alternation is of an indirect object form with a preposition at the end specifying the the recepient . Again vform &NUM none in the &NAME node so that no recursion occurs . 2E. . Transitive / intransitive contrast . 2E. . &CHAR ) &NAME broke the window &CHAR ) The window broke &NAME can subcategorise in &NUM ways ( as transitive and intransitive ) . We have thought of &NUM ways of dealing with this : &NUM ) By thinking about ' broke ' as a transitive verb that looses it 's subject / agent ( in &CHAR ) and then uses the object in the subject position . We say that certain verbs have the property of being able to ' swap agent ' in this way , and indicate this with an extra attribute in the lexical entries : broke &NAME [ ... swag3Dyes ... val3Dtrans ] drop &NAME [ ... swag3Dyes ... val3Dtrans ] improve: [ ... swag3Dyes ... val3Dtrans ] The rules below try to capture this , in that a gap may occur after such a verb . &CHAR - - ) &NAME &NAME [ gap3Dnp ] &NAME [ gap3Dnp ] -- ) &CHAR [ swag3Dyes ] &NAME [ gap3Dnp ] &NAME [ gap3Dnp ] -- ) &CHAR &NUM ) ( the other way ) By thinking of ' broke ' as a verb that can be both transitive and intransitive . I.e. give it &NUM lexical entries , and have &NUM rules for the VP-expansion : broke &NAME [ val3Dtrans ] broke &NAME [ val3Ditrans ] &NAME -- ) &CHAR [ val3Dtrans ] &NAME &NAME -- ) &CHAR [ val3Ditrans ] &CHAR : Which of these ( &NUM and &NUM ) is better ? 2E. . &NAME &NAME . &CHAR ) That &NAME kissed &NAME bothers &NAME . Here we 're trying to restrict the kind of verb that can occur after a &CHAR [ Comp3Dthat ] . We want it to be verbs of the kind ' bothers ' , ' hurts ' , ' maddens ' , etc. We &NAME that these can take &CHAR ' complement subject sentence ' before them by adding an attribute ' comsub ' in the lexicon . bothers &NAME [ .. val3Dtrans .. &NAME ... ] hurts &NAME [ .. val3Dtrans .. comsub3Dyes .. ] sucks &NAME [ .. val3Ditrans .. comsub3Dyes .. ] but : rains &NAME [ .. &NAME .. ] rules : S: [ comp3Dnone ] -- ) &NAME [ comp3Dthat ] &NAME [ comsub3Dyes ] S: [ comp3Dthat ] -- ) &NAME &NAME [ comp3Dnone ] S: [ comp3Dnone ] -- ) &NAME &NAME &NAME [ comsub3Dyes ] -- ) &NAME [ comsub3Dyes ] NP that &NAME [ ] Q: Is this an acceptable way of doing it ? &CHAR ) It bothers &NAME that &NAME kissed &NAME . Here , we 're trying to say that it 's ok for a sentence to have a ' extraposed subject ' ( it ) followed by &CHAR ' that-sentence ' only if the verb in the first sentence is of a particular type . ( To allow ' it bothers fido that .. ' , but not ' it rains that .. ' . bothers &NAME [ extrasb3Dyes ] hurts &NAME [ extrasb3Dyes ] rains &NAME [ extrasb3Dno ] it &CHAR [ extrasb3Dyes ] &CHAR - - ) &NAME [ extrasb3Dyes , val3Dtrans ] &CHAR [ comp3Dthat ] &CHAR [ extrasb3Dyes , val3DV ] -- ) &NAME [ extrasb3Dyes ] &NAME [ &NAME , extrasb3Dyes &NAME [ extrasb3Dyes ] -- ) &NAME [ extrasb3Dyes ] &NAME [ extrasb3Dyes ] -- ) &NAME [ extrasb3Dyes ] &NAME &NAME ? 