Zero = "0";
One = "1";
Bit = Zero | One;
export First = Optimize [Zero Zero* Bit* One One One One?];
export Second = Optimize [Zero Bit* One One One];
export Disagreements = Optimize [ (First - Second) | (Second - First) ];
export Triplets = Optimize [(Zero* One One One One* Zero*)];
export NotPillars = Optimize [ Bit* - (One One)* ];
export Oddlets = Optimize[(Zero*) | Zero* One (One One)* (Zero+ One (One One)*)* Zero*];
export WFlip = Optimize [ (Zero: ((One <2>) | (Zero <1>))) ((One : Zero <0.4>) | (Zero : Zero One <0.5>))+ (One <0.5>) ];
export WeightedMultipath =  (Zero : "" <1>) (Zero : One <2>) | (Zero : One <3>)(Zero : "" <2>) | (Zero Zero : One <4>);
export WeightedMultipathOpt = Optimize [WeightedMultipath];


x = "00";
y = "1";
T = WeightedMultipathOpt;
T_out = Project[ T, 'output']; # erases input from T
xT_out = Project[ x @ T, 'output']; # erases input x from x @ T
Ty_in = Project[ T @ y, 'input']; # erases output y from T @ y
xTy = x @ T @ y;
export exTye = ("":x) @ T @ (y:""); # erases input x & output y from x @ T @ y
export xT_out_opt = Optimize[xT_out];
export Ty_in_opt = Optimize[Ty_in];
export exTye_opt = Optimize[exTye];

export Ttest = "":T_out;
export xtest = "":xT_out;
export ytest = "": Ty_in;
